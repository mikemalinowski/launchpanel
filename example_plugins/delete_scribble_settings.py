from functools import partial
from collections import OrderedDict

import os
import qute
import shutil
import scribble
import launchpad


# ------------------------------------------------------------------------------
class DeleteScribbleSettingsAction(launchpad.LaunchAction):
    """
    Deletes setting files generated by the Scribble module.
    User will be prompted before deletion.

     Left-Click: deletes all setting files.
     Right-Click: displays a list of individual settings files to delete.
    """
    # -- Name of the plugin
    Name = 'Settings'

    # -- Categories this will be displayed in
    Groups = [
        'Utilities',
    ]

    # -- Verbose Description
    Description = __doc__


    # --------------------------------------------------------------------------
    @classmethod
    def run(cls, *args, **kwargs):
        """
        Deletes all setting files generated by Scribble.
        User will be prompted before deletion.
        :return:
        """

        # -- delete all files
        cls.delete_files()

    # --------------------------------------------------------------------------
    @classmethod
    def viability(cls, *args, **kwargs):
        """

        :param args:
        :param kwargs:
        :return:
        """

        return cls.VALID

    # --------------------------------------------------------------------------
    @classmethod
    def actions(cls):
        """
        Context menu
        :return:
        """

        scribble_files = OrderedDict()

        # -- iterate over files in the scribble settings folder
        for f in os.listdir(scribble.STORAGE_DIRECTORY):
            func = partial(
                cls.delete_files,
                f,
            )

            # -- create entry for found file
            scribble_files[
                str(
                    os.path.basename(
                        os.path.splitext(f)[0]
                    )
                )
            ] = func

        return scribble_files

    # --------------------------------------------------------------------------
    @classmethod
    def delete_files(cls, settings_file=None):
        """

        :param settings_file:
        :return:
        """

        # -- get parent window
        q_app = qute.QApplication.instance()

        # -- check users wants to delete settings
        if q_app:
            result = qute.QMessageBox.question(
                q_app.activeWindow(),
                'Warning: Deleting Settings',
                'Are you sure you want to delete tool settings?'
                '\n All qute module windows will be closed.',
                qute.QMessageBox.Yes,
                qute.QMessageBox.No
            )

            # -- exit if user quits
            if result != qute.QMessageBox.Yes:
                return False

        # -- check if we have been given a file to delete
        if settings_file:

            # -- just delete the passed filepath
            os.remove(
                os.path.join(
                    scribble.STORAGE_DIRECTORY,
                    settings_file,
                )
            )

        else:

            # -- delete files from scribble folder
            try:
                shutil.rmtree(scribble.STORAGE_DIRECTORY)
            except Exception as e:
                launchpad.log.error(e)

        launchpad.log.info('\nDeletion complete.\n')

